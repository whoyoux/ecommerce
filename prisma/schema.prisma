generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    cart          Cart?

    stripeCustomerId String? @unique @map("stripe_customer_id")

    personalInformation PersonalInformation?

    activateTokens ActivateToken[]
    active         Boolean         @default(false)

    orders Order[]
}

model ActivateToken {
    id          String    @id @default(cuid())
    token       String    @unique
    activatedAt DateTime? @map("activated_at")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model PersonalInformation {
    id String @id @default(cuid())

    firstName String @map("first_name")
    lastName  String @map("last_name")

    addressLine1 String  @map("address_line_1")
    addressLine2 String? @map("address_line_2")

    postalCode String @map("postal_code")

    state   String
    city    String
    country String

    phoneNumber String @map("phone_number")

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id    String @id @default(cuid())
    name  String
    slug  String @unique
    image String

    products Product[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Product {
    id          String   @id @default(cuid())
    label       String
    description String
    price       Float
    images      String[]
    rating      Float

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    productInCart ProductInCart[]
}

model Cart {
    id String @id @default(cuid())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique

    products ProductInCart[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model ProductInCart {
    id String @id @default(cuid())

    quantity Int

    product   Product @relation(fields: [productId], references: [id])
    productId String

    cart   Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)
    cartId String?

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    order   Order?  @relation(fields: [orderId], references: [id])
    orderId String?
}

model Order {
    id String @id @default(cuid())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    products ProductInCart[]

    paid   Boolean   @default(false)
    paidAt DateTime? @map("paid_at")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}
